{"ast":null,"code":"import { getYear, getMonth as getMonthIndex, getCenturyStart, getPreviousCenturyStart, getNextCenturyStart, getCenturyEnd, getPreviousCenturyEnd, getCenturyRange, getDecadeStart, getPreviousDecadeStart, getNextDecadeStart, getDecadeEnd, getPreviousDecadeEnd, getDecadeRange, getYearStart, getPreviousYearStart, getNextYearStart, getYearEnd, getPreviousYearEnd, getYearRange, getMonthStart, getPreviousMonthStart, getNextMonthStart, getMonthEnd, getPreviousMonthEnd, getMonthRange, getDayStart, getDayEnd, getDayRange } from '@wojtekmaj/date-utils';\nimport { CALENDAR_TYPES, WEEKDAYS } from './const.js';\nimport { formatYear as defaultFormatYear } from './dateFormatter.js';\nvar SUNDAY = WEEKDAYS[0];\nvar FRIDAY = WEEKDAYS[5];\nvar SATURDAY = WEEKDAYS[6];\n/* Simple getters - getting a property of a given point in time */\n/**\r\n * Gets day of the week of a given date.\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {number} Day of the week.\r\n */\nexport function getDayOfWeek(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n  var weekday = date.getDay();\n  switch (calendarType) {\n    case CALENDAR_TYPES.ISO_8601:\n      // Shifts days of the week so that Monday is 0, Sunday is 6\n      return (weekday + 6) % 7;\n    case CALENDAR_TYPES.ISLAMIC:\n      return (weekday + 1) % 7;\n    case CALENDAR_TYPES.HEBREW:\n    case CALENDAR_TYPES.GREGORY:\n      return weekday;\n    default:\n      throw new Error('Unsupported calendar type.');\n  }\n}\n/**\r\n * Century\r\n */\n/**\r\n * Gets the year of the beginning of a century of a given date.\r\n * @param {Date} date Date.\r\n * @returns {number} Year of the beginning of a century.\r\n */\nexport function getBeginOfCenturyYear(date) {\n  var beginOfCentury = getCenturyStart(date);\n  return getYear(beginOfCentury);\n}\n/**\r\n * Decade\r\n */\n/**\r\n * Gets the year of the beginning of a decade of a given date.\r\n * @param {Date} date Date.\r\n * @returns {number} Year of the beginning of a decade.\r\n */\nexport function getBeginOfDecadeYear(date) {\n  var beginOfDecade = getDecadeStart(date);\n  return getYear(beginOfDecade);\n}\n/**\r\n * Week\r\n */\n/**\r\n * Returns the beginning of a given week.\r\n *\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {Date} Beginning of a given week.\r\n */\nexport function getBeginOfWeek(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n  var year = getYear(date);\n  var monthIndex = getMonthIndex(date);\n  var day = date.getDate() - getDayOfWeek(date, calendarType);\n  return new Date(year, monthIndex, day);\n}\n/**\r\n * Gets week number according to ISO 8601 or US standard.\r\n * In ISO 8601, Arabic and Hebrew week 1 is the one with January 4.\r\n * In US calendar week 1 is the one with January 1.\r\n *\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {number} Week number.\r\n */\nexport function getWeekNumber(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n  var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.GREGORY ? CALENDAR_TYPES.GREGORY : CALENDAR_TYPES.ISO_8601;\n  var beginOfWeek = getBeginOfWeek(date, calendarType);\n  var year = getYear(date) + 1;\n  var dayInWeekOne;\n  var beginOfFirstWeek;\n  // Look for the first week one that does not come after a given date\n  do {\n    dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);\n    beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);\n    year -= 1;\n  } while (date < beginOfFirstWeek);\n  return Math.round((beginOfWeek.getTime() - beginOfFirstWeek.getTime()) / (8.64e7 * 7)) + 1;\n}\n/**\r\n * Others\r\n */\n/**\r\n * Returns the beginning of a given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} Beginning of a given range.\r\n */\nexport function getBegin(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getCenturyStart(date);\n    case 'decade':\n      return getDecadeStart(date);\n    case 'year':\n      return getYearStart(date);\n    case 'month':\n      return getMonthStart(date);\n    case 'day':\n      return getDayStart(date);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\r\n * Returns the beginning of a previous given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} Beginning of a previous given range.\r\n */\nexport function getBeginPrevious(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getPreviousCenturyStart(date);\n    case 'decade':\n      return getPreviousDecadeStart(date);\n    case 'year':\n      return getPreviousYearStart(date);\n    case 'month':\n      return getPreviousMonthStart(date);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\r\n * Returns the beginning of a next given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} Beginning of a next given range.\r\n */\nexport function getBeginNext(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getNextCenturyStart(date);\n    case 'decade':\n      return getNextDecadeStart(date);\n    case 'year':\n      return getNextYearStart(date);\n    case 'month':\n      return getNextMonthStart(date);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\nexport function getBeginPrevious2(rangeType, date) {\n  switch (rangeType) {\n    case 'decade':\n      return getPreviousDecadeStart(date, -100);\n    case 'year':\n      return getPreviousYearStart(date, -10);\n    case 'month':\n      return getPreviousMonthStart(date, -12);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\nexport function getBeginNext2(rangeType, date) {\n  switch (rangeType) {\n    case 'decade':\n      return getNextDecadeStart(date, 100);\n    case 'year':\n      return getNextYearStart(date, 10);\n    case 'month':\n      return getNextMonthStart(date, 12);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\r\n * Returns the end of a given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} End of a given range.\r\n */\nexport function getEnd(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getCenturyEnd(date);\n    case 'decade':\n      return getDecadeEnd(date);\n    case 'year':\n      return getYearEnd(date);\n    case 'month':\n      return getMonthEnd(date);\n    case 'day':\n      return getDayEnd(date);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\r\n * Returns the end of a previous given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} End of a previous given range.\r\n */\nexport function getEndPrevious(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getPreviousCenturyEnd(date);\n    case 'decade':\n      return getPreviousDecadeEnd(date);\n    case 'year':\n      return getPreviousYearEnd(date);\n    case 'month':\n      return getPreviousMonthEnd(date);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\nexport function getEndPrevious2(rangeType, date) {\n  switch (rangeType) {\n    case 'decade':\n      return getPreviousDecadeEnd(date, -100);\n    case 'year':\n      return getPreviousYearEnd(date, -10);\n    case 'month':\n      return getPreviousMonthEnd(date, -12);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\r\n * Returns an array with the beginning and the end of a given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date[]} Beginning and end of a given range.\r\n */\nexport function getRange(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getCenturyRange(date);\n    case 'decade':\n      return getDecadeRange(date);\n    case 'year':\n      return getYearRange(date);\n    case 'month':\n      return getMonthRange(date);\n    case 'day':\n      return getDayRange(date);\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\r\n * Creates a range out of two values, ensuring they are in order and covering entire period ranges.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date1 First date.\r\n * @param {Date} date2 Second date.\r\n * @returns {Date[]} Beginning and end of a given range.\r\n */\nexport function getValueRange(rangeType, date1, date2) {\n  var rawNextValue = [date1, date2].sort(function (a, b) {\n    return a.getTime() - b.getTime();\n  });\n  return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];\n}\nfunction toYearLabel(locale, formatYear, dates) {\n  if (formatYear === void 0) {\n    formatYear = defaultFormatYear;\n  }\n  return dates.map(function (date) {\n    return formatYear(locale, date);\n  }).join(' â€“ ');\n}\n/**\r\n * @callback FormatYear\r\n * @param {string} locale Locale.\r\n * @param {Date} date Date.\r\n * @returns {string} Formatted year.\r\n */\n/**\r\n * Returns a string labelling a century of a given date.\r\n * For example, for 2017 it will return 2001-2100.\r\n *\r\n * @param {string} locale Locale.\r\n * @param {FormatYear} formatYear Function to format a year.\r\n * @param {Date|string|number} date Date or a year as a string or as a number.\r\n * @returns {string} String labelling a century of a given date.\r\n */\nexport function getCenturyLabel(locale, formatYear, date) {\n  return toYearLabel(locale, formatYear, getCenturyRange(date));\n}\n/**\r\n * Returns a string labelling a decade of a given date.\r\n * For example, for 2017 it will return 2011-2020.\r\n *\r\n * @param {string} locale Locale.\r\n * @param {FormatYear} formatYear Function to format a year.\r\n * @param {Date|string|number} date Date or a year as a string or as a number.\r\n * @returns {string} String labelling a decade of a given date.\r\n */\nexport function getDecadeLabel(locale, formatYear, date) {\n  return toYearLabel(locale, formatYear, getDecadeRange(date));\n}\n/**\r\n * Returns a boolean determining whether a given date is the current day of the week.\r\n *\r\n * @param {Date} date Date.\r\n * @returns {boolean} Whether a given date is the current day of the week.\r\n */\nexport function isCurrentDayOfWeek(date) {\n  return date.getDay() === new Date().getDay();\n}\n/**\r\n * Returns a boolean determining whether a given date is a weekend day.\r\n *\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {boolean} Whether a given date is a weekend day.\r\n */\nexport function isWeekend(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n  var weekday = date.getDay();\n  switch (calendarType) {\n    case CALENDAR_TYPES.ISLAMIC:\n    case CALENDAR_TYPES.HEBREW:\n      return weekday === FRIDAY || weekday === SATURDAY;\n    case CALENDAR_TYPES.ISO_8601:\n    case CALENDAR_TYPES.GREGORY:\n      return weekday === SATURDAY || weekday === SUNDAY;\n    default:\n      throw new Error('Unsupported calendar type.');\n  }\n}","map":{"version":3,"names":["getYear","getMonth","getMonthIndex","getCenturyStart","getPreviousCenturyStart","getNextCenturyStart","getCenturyEnd","getPreviousCenturyEnd","getCenturyRange","getDecadeStart","getPreviousDecadeStart","getNextDecadeStart","getDecadeEnd","getPreviousDecadeEnd","getDecadeRange","getYearStart","getPreviousYearStart","getNextYearStart","getYearEnd","getPreviousYearEnd","getYearRange","getMonthStart","getPreviousMonthStart","getNextMonthStart","getMonthEnd","getPreviousMonthEnd","getMonthRange","getDayStart","getDayEnd","getDayRange","CALENDAR_TYPES","WEEKDAYS","formatYear","defaultFormatYear","SUNDAY","FRIDAY","SATURDAY","getDayOfWeek","date","calendarType","ISO_8601","weekday","getDay","ISLAMIC","HEBREW","GREGORY","Error","getBeginOfCenturyYear","beginOfCentury","getBeginOfDecadeYear","beginOfDecade","getBeginOfWeek","year","monthIndex","day","getDate","Date","getWeekNumber","calendarTypeForWeekNumber","beginOfWeek","dayInWeekOne","beginOfFirstWeek","Math","round","getTime","getBegin","rangeType","concat","getBeginPrevious","getBeginNext","getBeginPrevious2","getBeginNext2","getEnd","getEndPrevious","getEndPrevious2","getRange","getValueRange","date1","date2","rawNextValue","sort","a","b","toYearLabel","locale","dates","map","join","getCenturyLabel","getDecadeLabel","isCurrentDayOfWeek","isWeekend"],"sources":["C:/Users/user/Desktop/Library-ec2/client/node_modules/react-calendar/dist/esm/shared/dates.js"],"sourcesContent":["import { getYear, getMonth as getMonthIndex, getCenturyStart, getPreviousCenturyStart, getNextCenturyStart, getCenturyEnd, getPreviousCenturyEnd, getCenturyRange, getDecadeStart, getPreviousDecadeStart, getNextDecadeStart, getDecadeEnd, getPreviousDecadeEnd, getDecadeRange, getYearStart, getPreviousYearStart, getNextYearStart, getYearEnd, getPreviousYearEnd, getYearRange, getMonthStart, getPreviousMonthStart, getNextMonthStart, getMonthEnd, getPreviousMonthEnd, getMonthRange, getDayStart, getDayEnd, getDayRange, } from '@wojtekmaj/date-utils';\r\nimport { CALENDAR_TYPES, WEEKDAYS } from './const.js';\r\nimport { formatYear as defaultFormatYear } from './dateFormatter.js';\r\nvar SUNDAY = WEEKDAYS[0];\r\nvar FRIDAY = WEEKDAYS[5];\r\nvar SATURDAY = WEEKDAYS[6];\r\n/* Simple getters - getting a property of a given point in time */\r\n/**\r\n * Gets day of the week of a given date.\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {number} Day of the week.\r\n */\r\nexport function getDayOfWeek(date, calendarType) {\r\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\r\n    var weekday = date.getDay();\r\n    switch (calendarType) {\r\n        case CALENDAR_TYPES.ISO_8601:\r\n            // Shifts days of the week so that Monday is 0, Sunday is 6\r\n            return (weekday + 6) % 7;\r\n        case CALENDAR_TYPES.ISLAMIC:\r\n            return (weekday + 1) % 7;\r\n        case CALENDAR_TYPES.HEBREW:\r\n        case CALENDAR_TYPES.GREGORY:\r\n            return weekday;\r\n        default:\r\n            throw new Error('Unsupported calendar type.');\r\n    }\r\n}\r\n/**\r\n * Century\r\n */\r\n/**\r\n * Gets the year of the beginning of a century of a given date.\r\n * @param {Date} date Date.\r\n * @returns {number} Year of the beginning of a century.\r\n */\r\nexport function getBeginOfCenturyYear(date) {\r\n    var beginOfCentury = getCenturyStart(date);\r\n    return getYear(beginOfCentury);\r\n}\r\n/**\r\n * Decade\r\n */\r\n/**\r\n * Gets the year of the beginning of a decade of a given date.\r\n * @param {Date} date Date.\r\n * @returns {number} Year of the beginning of a decade.\r\n */\r\nexport function getBeginOfDecadeYear(date) {\r\n    var beginOfDecade = getDecadeStart(date);\r\n    return getYear(beginOfDecade);\r\n}\r\n/**\r\n * Week\r\n */\r\n/**\r\n * Returns the beginning of a given week.\r\n *\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {Date} Beginning of a given week.\r\n */\r\nexport function getBeginOfWeek(date, calendarType) {\r\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\r\n    var year = getYear(date);\r\n    var monthIndex = getMonthIndex(date);\r\n    var day = date.getDate() - getDayOfWeek(date, calendarType);\r\n    return new Date(year, monthIndex, day);\r\n}\r\n/**\r\n * Gets week number according to ISO 8601 or US standard.\r\n * In ISO 8601, Arabic and Hebrew week 1 is the one with January 4.\r\n * In US calendar week 1 is the one with January 1.\r\n *\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {number} Week number.\r\n */\r\nexport function getWeekNumber(date, calendarType) {\r\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\r\n    var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.GREGORY ? CALENDAR_TYPES.GREGORY : CALENDAR_TYPES.ISO_8601;\r\n    var beginOfWeek = getBeginOfWeek(date, calendarType);\r\n    var year = getYear(date) + 1;\r\n    var dayInWeekOne;\r\n    var beginOfFirstWeek;\r\n    // Look for the first week one that does not come after a given date\r\n    do {\r\n        dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);\r\n        beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);\r\n        year -= 1;\r\n    } while (date < beginOfFirstWeek);\r\n    return Math.round((beginOfWeek.getTime() - beginOfFirstWeek.getTime()) / (8.64e7 * 7)) + 1;\r\n}\r\n/**\r\n * Others\r\n */\r\n/**\r\n * Returns the beginning of a given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} Beginning of a given range.\r\n */\r\nexport function getBegin(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'century':\r\n            return getCenturyStart(date);\r\n        case 'decade':\r\n            return getDecadeStart(date);\r\n        case 'year':\r\n            return getYearStart(date);\r\n        case 'month':\r\n            return getMonthStart(date);\r\n        case 'day':\r\n            return getDayStart(date);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\n/**\r\n * Returns the beginning of a previous given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} Beginning of a previous given range.\r\n */\r\nexport function getBeginPrevious(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'century':\r\n            return getPreviousCenturyStart(date);\r\n        case 'decade':\r\n            return getPreviousDecadeStart(date);\r\n        case 'year':\r\n            return getPreviousYearStart(date);\r\n        case 'month':\r\n            return getPreviousMonthStart(date);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\n/**\r\n * Returns the beginning of a next given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} Beginning of a next given range.\r\n */\r\nexport function getBeginNext(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'century':\r\n            return getNextCenturyStart(date);\r\n        case 'decade':\r\n            return getNextDecadeStart(date);\r\n        case 'year':\r\n            return getNextYearStart(date);\r\n        case 'month':\r\n            return getNextMonthStart(date);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\nexport function getBeginPrevious2(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'decade':\r\n            return getPreviousDecadeStart(date, -100);\r\n        case 'year':\r\n            return getPreviousYearStart(date, -10);\r\n        case 'month':\r\n            return getPreviousMonthStart(date, -12);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\nexport function getBeginNext2(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'decade':\r\n            return getNextDecadeStart(date, 100);\r\n        case 'year':\r\n            return getNextYearStart(date, 10);\r\n        case 'month':\r\n            return getNextMonthStart(date, 12);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\n/**\r\n * Returns the end of a given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} End of a given range.\r\n */\r\nexport function getEnd(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'century':\r\n            return getCenturyEnd(date);\r\n        case 'decade':\r\n            return getDecadeEnd(date);\r\n        case 'year':\r\n            return getYearEnd(date);\r\n        case 'month':\r\n            return getMonthEnd(date);\r\n        case 'day':\r\n            return getDayEnd(date);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\n/**\r\n * Returns the end of a previous given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date} End of a previous given range.\r\n */\r\nexport function getEndPrevious(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'century':\r\n            return getPreviousCenturyEnd(date);\r\n        case 'decade':\r\n            return getPreviousDecadeEnd(date);\r\n        case 'year':\r\n            return getPreviousYearEnd(date);\r\n        case 'month':\r\n            return getPreviousMonthEnd(date);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\nexport function getEndPrevious2(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'decade':\r\n            return getPreviousDecadeEnd(date, -100);\r\n        case 'year':\r\n            return getPreviousYearEnd(date, -10);\r\n        case 'month':\r\n            return getPreviousMonthEnd(date, -12);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\n/**\r\n * Returns an array with the beginning and the end of a given range.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date Date.\r\n * @returns {Date[]} Beginning and end of a given range.\r\n */\r\nexport function getRange(rangeType, date) {\r\n    switch (rangeType) {\r\n        case 'century':\r\n            return getCenturyRange(date);\r\n        case 'decade':\r\n            return getDecadeRange(date);\r\n        case 'year':\r\n            return getYearRange(date);\r\n        case 'month':\r\n            return getMonthRange(date);\r\n        case 'day':\r\n            return getDayRange(date);\r\n        default:\r\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\r\n    }\r\n}\r\n/**\r\n * Creates a range out of two values, ensuring they are in order and covering entire period ranges.\r\n *\r\n * @param {RangeType} rangeType Range type (e.g. 'day')\r\n * @param {Date} date1 First date.\r\n * @param {Date} date2 Second date.\r\n * @returns {Date[]} Beginning and end of a given range.\r\n */\r\nexport function getValueRange(rangeType, date1, date2) {\r\n    var rawNextValue = [date1, date2].sort(function (a, b) { return a.getTime() - b.getTime(); });\r\n    return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];\r\n}\r\nfunction toYearLabel(locale, formatYear, dates) {\r\n    if (formatYear === void 0) { formatYear = defaultFormatYear; }\r\n    return dates.map(function (date) { return formatYear(locale, date); }).join(' â€“ ');\r\n}\r\n/**\r\n * @callback FormatYear\r\n * @param {string} locale Locale.\r\n * @param {Date} date Date.\r\n * @returns {string} Formatted year.\r\n */\r\n/**\r\n * Returns a string labelling a century of a given date.\r\n * For example, for 2017 it will return 2001-2100.\r\n *\r\n * @param {string} locale Locale.\r\n * @param {FormatYear} formatYear Function to format a year.\r\n * @param {Date|string|number} date Date or a year as a string or as a number.\r\n * @returns {string} String labelling a century of a given date.\r\n */\r\nexport function getCenturyLabel(locale, formatYear, date) {\r\n    return toYearLabel(locale, formatYear, getCenturyRange(date));\r\n}\r\n/**\r\n * Returns a string labelling a decade of a given date.\r\n * For example, for 2017 it will return 2011-2020.\r\n *\r\n * @param {string} locale Locale.\r\n * @param {FormatYear} formatYear Function to format a year.\r\n * @param {Date|string|number} date Date or a year as a string or as a number.\r\n * @returns {string} String labelling a decade of a given date.\r\n */\r\nexport function getDecadeLabel(locale, formatYear, date) {\r\n    return toYearLabel(locale, formatYear, getDecadeRange(date));\r\n}\r\n/**\r\n * Returns a boolean determining whether a given date is the current day of the week.\r\n *\r\n * @param {Date} date Date.\r\n * @returns {boolean} Whether a given date is the current day of the week.\r\n */\r\nexport function isCurrentDayOfWeek(date) {\r\n    return date.getDay() === new Date().getDay();\r\n}\r\n/**\r\n * Returns a boolean determining whether a given date is a weekend day.\r\n *\r\n * @param {Date} date Date.\r\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\r\n * @returns {boolean} Whether a given date is a weekend day.\r\n */\r\nexport function isWeekend(date, calendarType) {\r\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\r\n    var weekday = date.getDay();\r\n    switch (calendarType) {\r\n        case CALENDAR_TYPES.ISLAMIC:\r\n        case CALENDAR_TYPES.HEBREW:\r\n            return weekday === FRIDAY || weekday === SATURDAY;\r\n        case CALENDAR_TYPES.ISO_8601:\r\n        case CALENDAR_TYPES.GREGORY:\r\n            return weekday === SATURDAY || weekday === SUNDAY;\r\n        default:\r\n            throw new Error('Unsupported calendar type.');\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}